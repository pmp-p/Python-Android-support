--- python3/Python/fileutils.c	2019-10-01 19:23:17.000000000 +0200
+++ python3-android/Python/fileutils.c	2019-10-09 04:41:00.287481593 +0200
@@ -32,6 +32,16 @@
 int _Py_open_cloexec_works = -1;
 #endif
 
+//PMPP API<21
+#ifdef __ANDROID__
+    #if __ANDROID_API__ < 21
+        #ifndef CRYSTAX
+            #define NO_LOCALECONV 1
+        #endif
+    #endif
+#endif
+//PMPP API<21
+
 PyObject *
 _Py_device_encoding(int fd)
 {
@@ -1863,3 +1873,55 @@
     PyMem_Free(oldloc);
     return res;
 }
+
+//PMPP API<21
+#if __ANDROID__ && (__ANDROID_API__ < 21)
+    #ifndef CRYSTAX
+/*
+        char    *currency_symbol
+        char    *decimal_point
+        char     frac_digits
+        char    *grouping
+        char    *int_curr_symbol
+        char     int_frac_digits
+        char     int_n_cs_precedes
+        char     int_n_sep_by_space
+        char     int_n_sign_posn
+        char     int_p_cs_precedes
+        char     int_p_sep_by_space
+        char     int_p_sign_posn
+        char    *mon_decimal_point
+        char    *mon_grouping
+        char    *mon_thousands_sep
+        char    *negative_sign
+        char     n_cs_precedes
+        char     n_sep_by_space
+        char     n_sign_posn
+        char    *positive_sign
+        char     p_cs_precedes
+        char     p_sep_by_space
+        char     p_sign_posn
+        char    *thousands_sep
+*/
+        unsigned char const decimal_point[] =".";
+        unsigned char const thousands_sep[] = { 0, 0 };
+        static struct lconv lc_cache ;
+
+        //extern "C" {
+            struct lconv *localeconv(void){
+        //std::use_facet<std::numpunct<char> >(std::locale(std::setlocale(LC_ALL, NULL))).decimal_point();
+                lc_cache.decimal_point = &decimal_point;
+
+        //std::use_facet<std::numpunct<char> >(std::locale(std::setlocale(LC_ALL, NULL))).thousands_sep();
+                lc_cache.thousands_sep = &thousands_sep ;
+                return &lc_cache;
+            }
+        //}
+
+int
+_Py_GetLocaleconvNumeric19(PyObject **decimal_point, PyObject **thousands_sep)
+{
+    return _Py_GetLocaleconvNumeric(localeconv(),decimal_point,thousands_sep);
+}
+    #endif
+#endif
